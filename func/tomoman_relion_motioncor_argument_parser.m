function param_str = tomoman_relion_motioncor_argument_parser(param)
%% tomoman_motioncor2_argument_parser
% An argument parser to set the default arguments for MotionCor2. It also
% checks required input arguments. 
%
% Written based on Relion build relion 3.1v eer.
% __FUTURE__
%


%% Initialize

% MotionCor2 parameters 
parameters = {'i','str';...
              'o','str';...
              'j','int';...
              'max_io_threads','int';...
              'only_do_unfinished','bool';...
              'do_at_most','int';...
              'grouping_for_ps','int';...
              'ps_size','int';...
              'first_frame_sum','int';...
              'last_frame_sum','int';...
              'eer_grouping','int';...
              'eer_upsampling','int';...
              'use_motioncor2','bool';...
              'motioncor2_exe','str';...
              'bin_factor','int';...
              'bfactor','int';...
              'gainref','str';...
              'gain_rot','int';...
              'gain_flip','int';...
              'patch_x','int';...
              'patch_y','int';...
              'group_frames','int';...
              'defect_file','str';...
              'archive','str';...
              'other_motioncor2_args','str';...
              'gpu','int';...
              'dose_weighting','bool';...
              'angpix','float';...
              'voltage','int';...
              'dose_per_frame','float';...
              'preexposure','float';...
              'use_own','bool';...
              'skip_defect','bool';...
              'save_noDW','bool';...
              'max_iter','int';...
              'interpolate_shifts','bool';...
              'ccf_downsample','int';...
              'early_binning','bool';...
              'no_early_binning','bool';...
              'dose_motionstats_cutoff','float';...
              };
n_param = numel(parameters); 



%% Check fields

% Output string
param_str_cell = cell(n_param,1);

% Parse input fields
fields = fieldnames(param);
n_fields = numel(fields);

% Loop through and prepare outputs
for i = 1:n_fields
    
    % If field is present, set up string
    field_test = strcmp(parameters(:,1),fields(i));
    if any(field_test) && ~isempty(param.(fields{i}))
        
        % Assemble string based on field type
        field_type = parameters{find(field_test,1,'first'),2};
        
        switch field_type
            case 'str'
                param_str_cell{i} = [' --',fields{i},' ',param.(fields{i}),' '];
            case 'int'
                param_str_cell{i} = [' --',fields{i},' ',num2str(param.(fields{i}),'%i ')];
            case 'float'
                param_str_cell{i} = [' --',fields{i},' ',num2str(param.(fields{i}),'%f ')];
            case 'bool'
                param_str_cell{i} = [' --',fields{i},' ')];
        end
        
    end
end

% Concatenate string
param_str = [param_str_cell{:}];





        
        

