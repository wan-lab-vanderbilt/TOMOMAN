function tomolist = tomoman_imod_preprocess(tomolist, p, imod_param, write_list)
%% will_tomoman_imod_preprocess
% A function for taking a tomolist and running batched initial IMOD 
% preprocessing.
%
% WW 12-2017


%% Initialize

% Number of stacks
n_stacks = size(tomolist,1);

% When to end batchruntomo
endnum=0;

%% Write directive file and preprocess for each tomogram

for i = 1:n_stacks
        
    % Check for skip
    if (tomolist(i).skip == false)
        process = true;
    else
        process = false;
    end
    % Check for previous alignment
    if (process == true) && (tomolist(i).imod_preprocessed == false)
        process = true;
    else
        process = false;
    end        
    % Check for force_realign
    if (logical(imod_param.force_imod) == true) && (tomolist(i).skip == false)
        process = true;
    end    
        
    
    
    % Perform IMOD preprocessing
    if process        
        disp(['TOMOMAN: Initializing batck processing for stack ',tomolist(i).dose_filtered_stack_name]);

%         % Go to tomo directory
%         cd(tomolist(i).stack_dir);

        if imod_param.force_imod
            [~,dfname,dfext] = fileparts(tomolist(i).dose_filtered_stack_name);
            if exist([tomolist(i).stack_dir,dfname,'_orig',dfext],'file')
                disp(['TOMOMAN: Forced repeat preprocessing... Original tilt stack ',dfname,'_orig',dfext,' found and will be used...']);
                movefile([tomolist(i).stack_dir,dfname,'_orig',dfext], [tomolist(i).stack_dir,tomolist(i).dose_filtered_stack_name]);
            end
        end        
        
        % Initialize adoc ouptut
        adoc = fopen([tomolist(i).stack_dir,'preprocess.adoc'],'w');
        fprintf(adoc,'# An adoc file for preprocessing generated by tomoman_imod_preprocess \n\n');
        fprintf(adoc,['setupset.datasetDirectory=',tomolist(i).stack_dir,'\n']);

        
        % Copytomocoms
        if imod_param.copytomocoms == 1
            [~,name,~] = fileparts(tomolist(i).dose_filtered_stack_name);
            fprintf(adoc,['setupset.copyarg.name=',name,'\n']);
            fprintf(adoc,['setupset.copyarg.dual=0','\n']);
            fprintf(adoc,['setupset.copyarg.pixel=',num2str(tomolist(i).pixelsize(1)/10),'\n']);
            fprintf(adoc,['setupset.copyarg.gold=',num2str(imod_param.goldsize),'\n']);
            if ~isempty(imod_param.rotation)
                fprintf(adoc,['setupset.copyarg.rotation=',num2str(imod_param.rotation),'\n']);
            else
                fprintf(adoc,['setupset.copyarg.rotation=',num2str(tomolist(i).tilt_axis_angle),'\n']);
            end
            fprintf(adoc,'setupset.copyarg.userawtlt=1\n');                        
        end

        % CCD Eraser
        if imod_param.ccderaser == 1
            fprintf(adoc,'runtime.Preprocessing.any.removeXrays=1\n');
            if imod_param.archiveoriginal == 1
                fprintf(adoc,'runtime.Preprocessing.any.archiveOriginal=1\n');
            end
            endnum=1;
        end

        % Coarse alignment (Added coarse alignment binning support 08-2020)
        if imod_param.coarsealign == 1
            if ~isempty(imod_param.tiltxcorrbinning)
                fprintf(adoc,['comparam.xcorr.tiltxcorr.BinningToApply=',num2str(imod_param.tiltxcorrbinning),'\n']);
            end
            if ~isempty(imod_param.tiltxcorrangleoffset)
                fprintf(adoc,['comparam.xcorr.tiltxcorr.AngleOffset=',num2str(imod_param.tiltxcorrangleoffset),'\n']);
            end            
            if imod_param.ExcludeCentralPeak == 1
                fprintf(adoc,['comparam.xcorr.tiltxcorr.ExcludeCentralPeak\n']);
            end
            if ~isempty(imod_param.ShiftLimitsXandY)
                fprintf(adoc,['comparam.xcorr.tiltxcorr.ShiftLimitsXandY=',num2str(imod_param.ShiftLimitsXandY(1)),',',num2str(imod_param.ShiftLimitsXandY(2)),'\n']);
            end
            fprintf(adoc,['comparam.prenewst.newstack.BinByFactor=',num2str(imod_param.coarsealignbin),'\n']);
            fprintf(adoc,['comparam.prenewst.newstack.AntialiasFilter=',num2str(imod_param.coarseantialias),'\n']);
            fprintf(adoc,['comparam.prenewst.newstack.ModeToOutput=',imod_param.convbyte,'\n']);
            endnum=3;
        end
        
        % Autoseed
        if imod_param.autoseed == 1
            fprintf(adoc,'runtime.Fiducials.any.trackingMethod=0\n');
            fprintf(adoc,'runtime.Fiducials.any.seedingMethod=1\n');
            fprintf(adoc,['comparam.track.beadtrack.LocalAreaTracking=',num2str(imod_param.localareatracking),'\n']);
            fprintf(adoc,['comparam.track.beadtrack.LocalAreaTargetSize=',num2str(imod_param.localareasize),'\n']);
            fprintf(adoc,['comparam.track.beadtrack.SobelFilterCentering=',num2str(imod_param.sobelfilter),'\n']);
            fprintf(adoc,['comparam.track.beadtrack.KernelSigmaForSobel=',num2str(imod_param.sobelkernel),'\n']);
            fprintf(adoc,['comparam.track.beadtrack.RoundsOfTracking=',num2str(imod_param.n_rounds),'\n']);
            fprintf(adoc,['runtime.BeadTracking.any.numberOfRuns=',num2str(imod_param.n_runs),'\n']);
            fprintf(adoc,['comparam.autofidseed.autofidseed.TwoSurfaces=',num2str(imod_param.two_surf),'\n']);
            fprintf(adoc,['comparam.autofidseed.autofidseed.TargetNumberOfBeads=',num2str(imod_param.n_beads),'\n']);
             fprintf(adoc,['comparam.autofidseed.autofidseed.AdjustSizes=',num2str(imod_param.adjustsize),'\n']);
            endnum=5;
        end
        
        
        % other parameters (SAGAR 08-2020)
        fprintf(adoc,'runtime.Positioning.any.wholeTomogram=1\n');
        fprintf(adoc,['runtime.Positioning.any.binByFactor=',num2str(imod_param.positioning_binning),'\n']); % add option
        fprintf(adoc,['runtime.Positioning.any.thickness=',num2str(imod_param.positioning_thickness),'\n']);
        fprintf(adoc,['runtime.AlignedStack.any.binByFactor=',num2str(imod_param.alignedstack_binning),'\n']);
        
        fclose(adoc);
    
        % Run batchtomorun
        disp('TOMOMAN: Running IMOD preprocessing...');
        system(['batchruntomo -directive ',tomolist(i).stack_dir,'preprocess.adoc -end ',num2str(endnum)]);
        disp(['TOMOMAN: IMOD preprocessing on stack ',tomolist(i).dose_filtered_stack_name, 'complete!!!!']);
        
        % Update tomolist
        tomolist(i).imod_preprocessed = true;
        
        % Save tomolist
        if write_list
            save([p.root_dir,p.tomolist_name],'tomolist');
        end

    end 
end


